L<-2^K
eps<-1e-04
diff<-1
iter<-1
gP<-g0
sP<-s0
Pro_Attri<-rep(1/2^K,L)
while(diff>eps){
eta_LJ<-matrix(NA,L,J)
PossA_TQ<-Poss_Attr%*%t(Q)
rQ<-rowSums(Q)
PossrQ_M<-rep(1,L)%*%t(rQ)
eta_LJ<-matrix(as.numeric(PossA_TQ==PossrQ_M),L,J)
P_Correct<-((rep(1,L)%*%t(1-s))^(eta_LJ))*(rep(1,L)%*%t(g))^(1-eta_LJ)
P_Incorrect<-1-P_Correct
P_CorArr<-array(P_Correct,dim=c(L,J,N))
Res_Arr<-array(Res,dim=c(N,J,L))
Res_AT<-aperm(Res_Arr,c(3,2,1))
#eRes<-(P_CorArr^Res_AT)*((1-P_CorArr)^(1-Res_AT))
eRes<-(P_CorArr*Res_AT)+((1-P_CorArr)*(1-Res_AT))
Pa<-apply(eRes,c(1,3),prod)*(Dis_Attri%*%t(rep(1,N)))
PaS<-colSums(Pa)
PaRes<-Pa/(rep(1,L)%*%t(PaS))
I_l<-rowSums(PaRes)
I_jl0<-colSums((1-eta_LJ)*(as.vector(I_l)%*%t(rep(1,J))))
I_jl1<-sum(I_l)-I_jl0
Res_AT1<-aperm(Res_Arr,c(3,1,2))
PaRes_Arr<-array(PaRes,dim=c(L,N,J))
R_jl<-t(apply(Res_AT1*PaRes_Arr,c(1,3),sum))
R_jl0<-rowSums(R_jl*t(1-eta_LJ))
R_jl1<-rowSums(R_jl*t(eta_LJ))
g<-R_jl0/I_jl0
s<-(I_jl1-R_jl1)/I_jl1
diff<-max(abs(gP-g),abs(sP-s))###Consider PaRes or not?
gP<-g
sP<-s
iter<-iter+1
}
eta_LJ<-matrix(NA,L,J)
PossA_TQ<-Poss_Attr%*%t(Q)
rQ<-rowSums(Q)
PossrQ_M<-rep(1,L)%*%t(rQ)
eta_LJ<-matrix(as.numeric(PossA_TQ==PossrQ_M),L,J)
P_Correct<-((rep(1,L)%*%t(1-s))^(eta_LJ))*(rep(1,L)%*%t(g))^(1-eta_LJ)
P_Incorrect<-1-P_Correct
P_CorArr<-array(P_Correct,dim=c(L,J,N))
Res_Arr<-array(Res,dim=c(N,J,L))
Res_AT<-aperm(Res_Arr,c(3,2,1))
#eRes<-(P_CorArr^Res_AT)*((1-P_CorArr)^(1-Res_AT))
eRes<-(P_CorArr*Res_AT)+((1-P_CorArr)*(1-Res_AT))
Pa<-apply(eRes,c(1,3),prod)*(Dis_Attri%*%t(rep(1,N)))
dim((Dis_Attri%*%t(rep(1,N)))
)
K
Pa<-apply(eRes,c(1,3),prod)*(Pro_Attri%*%t(rep(1,N)))
PaS<-colSums(Pa)
PaRes<-Pa/(rep(1,L)%*%t(PaS))
I_l<-rowSums(PaRes)
I_jl0<-colSums((1-eta_LJ)*(as.vector(I_l)%*%t(rep(1,J))))
I_jl1<-sum(I_l)-I_jl0
Res_AT1<-aperm(Res_Arr,c(3,1,2))
PaRes_Arr<-array(PaRes,dim=c(L,N,J))
R_jl<-t(apply(Res_AT1*PaRes_Arr,c(1,3),sum))
R_jl0<-rowSums(R_jl*t(1-eta_LJ))
R_jl1<-rowSums(R_jl*t(eta_LJ))
g<-R_jl0/I_jl0
s<-(I_jl1-R_jl1)/I_jl1
diff<-max(abs(gP-g),abs(sP-s))###Consider PaRes or not?
gP<-g
sP<-s
iter<-iter+1
while(diff>eps){
eta_LJ<-matrix(NA,L,J)
PossA_TQ<-Poss_Attr%*%t(Q)
rQ<-rowSums(Q)
PossrQ_M<-rep(1,L)%*%t(rQ)
eta_LJ<-matrix(as.numeric(PossA_TQ==PossrQ_M),L,J)
P_Correct<-((rep(1,L)%*%t(1-s))^(eta_LJ))*(rep(1,L)%*%t(g))^(1-eta_LJ)
P_Incorrect<-1-P_Correct
P_CorArr<-array(P_Correct,dim=c(L,J,N))
Res_Arr<-array(Res,dim=c(N,J,L))
Res_AT<-aperm(Res_Arr,c(3,2,1))
#eRes<-(P_CorArr^Res_AT)*((1-P_CorArr)^(1-Res_AT))
eRes<-(P_CorArr*Res_AT)+((1-P_CorArr)*(1-Res_AT))
Pa<-apply(eRes,c(1,3),prod)*(Pro_Attri%*%t(rep(1,N)))
PaS<-colSums(Pa)
PaRes<-Pa/(rep(1,L)%*%t(PaS))
I_l<-rowSums(PaRes)
I_jl0<-colSums((1-eta_LJ)*(as.vector(I_l)%*%t(rep(1,J))))
I_jl1<-sum(I_l)-I_jl0
Res_AT1<-aperm(Res_Arr,c(3,1,2))
PaRes_Arr<-array(PaRes,dim=c(L,N,J))
R_jl<-t(apply(Res_AT1*PaRes_Arr,c(1,3),sum))
R_jl0<-rowSums(R_jl*t(1-eta_LJ))
R_jl1<-rowSums(R_jl*t(eta_LJ))
g<-R_jl0/I_jl0
s<-(I_jl1-R_jl1)/I_jl1
diff<-max(abs(gP-g),abs(sP-s))###Consider PaRes or not?
gP<-g
sP<-s
iter<-iter+1
}
cbind(gT,g)
cbind(sT,s)
gT-g
sT-s
#Setting 1
N<-2000; J<-20; K<-2
#Setting 2
N<-500; J<-20; K<-5;
L<-2^K
Poss_Attr<-matrix(NA,2^K,K)
for(l in 1:K){
repTimes<-2^(l-1)
Poss_Attr[,l]<-rep(c(rep(1,L/2^l),rep(0,L/2^l)),repTimes)
}
indexT<-sample(1:(2^K),N,replace=T)
Attr_N<-Poss_Attr[indexT,]
Q<-matrix(NA,J,K)
Q[1:K,1:K]<-diag(K)
Q[(K+1):(2*K),1:K]<-diag(K)
Q[(2*K+1):(3*K),1:K]<-diag(K)
indexQ<-sample(1:(2^K-1),J-3*K,replace=T)
Q[-(1:(3*K)),1:K]<-Poss_Attr[indexQ,]
#s<-rep(0.2,J)
#g<-rep(0.2,J)
s<-runif(J,0,0.3)
g<-runif(J,0,0.3)
sT<-s
gT<-g
A_TQ<-Attr_N%*%t(Q)
rQ<-rowSums(Q)
rQ_M<-rep(1,N)%*%t(rQ)
eta<-matrix(as.numeric(A_TQ==rQ_M),N,J)
Rs<-matrix(runif(N*J,0,1),N,J)
s1<-rep(1,N)%*%t(s)
g1<-rep(1,N)%*%t(g)
Com<-eta*(1-s1)+(1-eta)*g1
#Response Data
Res<-matrix(as.numeric(Rs<=Com),N,J)
###########################Initial Values
s0<-runif(J,0,0.3)
g0<-runif(J,0,0.3)
s<-s0
g<-g0
Attr_N0<-matrix(NA,N,K)
Attr_N0[(1:N),(1:K)]<-sample(0:1,N*K,replace=T)
A_TQ0<-Attr_N0%*%t(Q)
eta0<-matrix(as.numeric(A_TQ0==rQ_M),N,J)
L<-2^K
eps<-1e-04
diff<-1
iter<-1
gP<-g0
sP<-s0
Pro_Attri<-rep(1/2^K,L)
while(diff>eps){
eta_LJ<-matrix(NA,L,J)
PossA_TQ<-Poss_Attr%*%t(Q)
rQ<-rowSums(Q)
PossrQ_M<-rep(1,L)%*%t(rQ)
eta_LJ<-matrix(as.numeric(PossA_TQ==PossrQ_M),L,J)
P_Correct<-((rep(1,L)%*%t(1-s))^(eta_LJ))*(rep(1,L)%*%t(g))^(1-eta_LJ)
P_Incorrect<-1-P_Correct
P_CorArr<-array(P_Correct,dim=c(L,J,N))
Res_Arr<-array(Res,dim=c(N,J,L))
Res_AT<-aperm(Res_Arr,c(3,2,1))
#eRes<-(P_CorArr^Res_AT)*((1-P_CorArr)^(1-Res_AT))
eRes<-(P_CorArr*Res_AT)+((1-P_CorArr)*(1-Res_AT))
Pa<-apply(eRes,c(1,3),prod)*(Pro_Attri%*%t(rep(1,N)))
PaS<-colSums(Pa)
PaRes<-Pa/(rep(1,L)%*%t(PaS))
I_l<-rowSums(PaRes)
I_jl0<-colSums((1-eta_LJ)*(as.vector(I_l)%*%t(rep(1,J))))
I_jl1<-sum(I_l)-I_jl0
Res_AT1<-aperm(Res_Arr,c(3,1,2))
PaRes_Arr<-array(PaRes,dim=c(L,N,J))
R_jl<-t(apply(Res_AT1*PaRes_Arr,c(1,3),sum))
R_jl0<-rowSums(R_jl*t(1-eta_LJ))
R_jl1<-rowSums(R_jl*t(eta_LJ))
g<-R_jl0/I_jl0
s<-(I_jl1-R_jl1)/I_jl1
diff<-max(abs(gP-g),abs(sP-s))###Consider PaRes or not?
gP<-g
sP<-s
iter<-iter+1
}
Est_Attribute<-matrix(as.numeric(PaRes>0.5),L,N)
View(cbind(t(Est_Attribute),Attr_N))
dim(Attr_N)
dim(t(Est_Attribute))
dim(PaRes)
Est_Attribute<-matrix(as.numeric(PaRes>0.5),K,N)
View(cbind(t(Est_Attribute),Attr_N))
rowSums(PaRes)
colSums(PaRes)
Est_Attribute_Pattern<-apply(PaRes,2,which.max)
Est_Attribute_Pattern
dim(PaRes)
Est_Attribute<-Poss_Attr[Est_Attribute_Pattern,1:N]
N
cbind(Est_Attribute_Pattern,1:N)
Est_Attribute<-Poss_Attr[cbind(Est_Attribute_Pattern,1:N)]
Est_Attribute<-Poss_Attr[cbind(Est_Attribute_Pattern,1:N)[,1],cbind(Est_Attribute_Pattern,1:N)[,2]]
Est_Attribute<-Poss_Attr[[cbind(Est_Attribute_Pattern,1:N)]]
whcich(Poss_Attr[cbind(Est_Attribute_Pattern,1:N)])
Est_Attribute<-which(Poss_Attr[cbind(Est_Attribute_Pattern,1:N)])
dim(Poss_Attr)
Est_Attribute<-PaRes[cbind(Est_Attribute_Pattern,1:N)]
Est_Attribute
Est_Attribute<-Poss_Attr[Est_Attribute_Pattern,]
Est_Attribute
dim(Est_Attribute)
View(cbind(t(Est_Attribute),Attr_N))
dim(Attr_N)
dim(Est_Attribute)
View(cbind(Est_Attribute,Attr_N))
Est_Attribute-Attr_N
#Setting 1
N<-2000; J<-20; K<-2
#Setting 2
N<-500; J<-20; K<-5;
L<-2^K
Poss_Attr<-matrix(NA,2^K,K)
for(l in 1:K){
repTimes<-2^(l-1)
Poss_Attr[,l]<-rep(c(rep(1,L/2^l),rep(0,L/2^l)),repTimes)
}
indexT<-sample(1:(2^K),N,replace=T)
Attr_N<-Poss_Attr[indexT,]
Q<-matrix(NA,J,K)
Q[1:K,1:K]<-diag(K)
Q[(K+1):(2*K),1:K]<-diag(K)
Q[(2*K+1):(3*K),1:K]<-diag(K)
indexQ<-sample(1:(2^K-1),J-3*K,replace=T)
Q[-(1:(3*K)),1:K]<-Poss_Attr[indexQ,]
#s<-rep(0.2,J)
#g<-rep(0.2,J)
s<-runif(J,0,0.3)
g<-runif(J,0,0.3)
sT<-s
gT<-g
A_TQ<-Attr_N%*%t(Q)
rQ<-rowSums(Q)
rQ_M<-rep(1,N)%*%t(rQ)
eta<-matrix(as.numeric(A_TQ==rQ_M),N,J)
Rs<-matrix(runif(N*J,0,1),N,J)
s1<-rep(1,N)%*%t(s)
g1<-rep(1,N)%*%t(g)
Com<-eta*(1-s1)+(1-eta)*g1
#Response Data
Res<-matrix(as.numeric(Rs<=Com),N,J)
###########################Initial Values
s0<-runif(J,0,0.3)
g0<-runif(J,0,0.3)
s<-s0
g<-g0
Attr_N0<-matrix(NA,N,K)
Attr_N0[(1:N),(1:K)]<-sample(0:1,N*K,replace=T)
A_TQ0<-Attr_N0%*%t(Q)
eta0<-matrix(as.numeric(A_TQ0==rQ_M),N,J)
L<-2^K
eps<-1e-04
diff<-1
iter<-1
gP<-g0
sP<-s0
Pro_Attri<-rep(1/2^K,L)
while(diff>eps){
eta_LJ<-matrix(NA,L,J)
PossA_TQ<-Poss_Attr%*%t(Q)
rQ<-rowSums(Q)
PossrQ_M<-rep(1,L)%*%t(rQ)
eta_LJ<-matrix(as.numeric(PossA_TQ==PossrQ_M),L,J)
P_Correct<-((rep(1,L)%*%t(1-s))^(eta_LJ))*(rep(1,L)%*%t(g))^(1-eta_LJ)
P_Incorrect<-1-P_Correct
P_CorArr<-array(P_Correct,dim=c(L,J,N))
Res_Arr<-array(Res,dim=c(N,J,L))
Res_AT<-aperm(Res_Arr,c(3,2,1))
#eRes<-(P_CorArr^Res_AT)*((1-P_CorArr)^(1-Res_AT))
eRes<-(P_CorArr*Res_AT)+((1-P_CorArr)*(1-Res_AT))
Pa<-apply(eRes,c(1,3),prod)*(Pro_Attri%*%t(rep(1,N)))
PaS<-colSums(Pa)
PaRes<-Pa/(rep(1,L)%*%t(PaS))
I_l<-rowSums(PaRes)
I_jl0<-colSums((1-eta_LJ)*(as.vector(I_l)%*%t(rep(1,J))))
I_jl1<-sum(I_l)-I_jl0
Res_AT1<-aperm(Res_Arr,c(3,1,2))
PaRes_Arr<-array(PaRes,dim=c(L,N,J))
R_jl<-t(apply(Res_AT1*PaRes_Arr,c(1,3),sum))
R_jl0<-rowSums(R_jl*t(1-eta_LJ))
R_jl1<-rowSums(R_jl*t(eta_LJ))
g<-R_jl0/I_jl0
s<-(I_jl1-R_jl1)/I_jl1
diff<-max(abs(gP-g),abs(sP-s))###Consider PaRes or not?
gP<-g
sP<-s
iter<-iter+1
}
Est_Attribute_Pattern<-apply(PaRes,2,which.max)
Est_Attribute<-Poss_Attr[Est_Attribute_Pattern,]
View(cbind(Est_Attribute,Attr_N))
Est_Attribute-Attr_N
Est_Attribute-Attr_N0
dim(PaRes)
dim((1-eta_LJ))
dim(R_jl)
iter
diff
#########################Generate Response Data
#Setting 1
N<-2000; J<-20; K<-2
#Setting 2
N<-500; J<-20; K<-5;
L<-2^K
Poss_Attr<-matrix(NA,2^K,K)#All possible attribute pattern
for(l in 1:K){
repTimes<-2^(l-1)
Poss_Attr[,l]<-rep(c(rep(1,L/2^l),rep(0,L/2^l)),repTimes)
}
indexT<-sample(1:(2^K),N,replace=T)#Sample the true attribute for N subjects
Attr_N<-Poss_Attr[indexT,]
Q<-matrix(NA,J,K)  #Q matrix
Q[1:K,1:K]<-diag(K) #Identifiablity: three identity matrices
Q[(K+1):(2*K),1:K]<-diag(K)
Q[(2*K+1):(3*K),1:K]<-diag(K)
indexQ<-sample(1:(2^K-1),J-3*K,replace=T) #Avoid all zero design for each item j
Q[-(1:(3*K)),1:K]<-Poss_Attr[indexQ,]
#s<-rep(0.2,J)
#g<-rep(0.2,J)
sT<-runif(J,0,0.3) #True value for s
gT<-runif(J,0,0.3) #True value for g
A_TQ<-Attr_N%*%t(Q)
rQ<-rowSums(Q)
rQ_M<-rep(1,N)%*%t(rQ)
eta<-matrix(as.numeric(A_TQ==rQ_M),N,J)#True value for eta
Rs<-matrix(runif(N*J,0,1),N,J)
s1<-rep(1,N)%*%t(sT)
g1<-rep(1,N)%*%t(gT)
Com<-eta*(1-s1)+(1-eta)*g1#Correct response probability matrix
Res<-matrix(as.numeric(Rs<=Com),N,J)#Response Data
###########################Initial Values
s0<-runif(J,0,0.3)
g0<-runif(J,0,0.3)
s<-s0
g<-g0
Attr_N0<-matrix(NA,N,K)
Attr_N0[(1:N),(1:K)]<-sample(0:1,N*K,replace=T)#Random initial values for attributes
A_TQ0<-Attr_N0%*%t(Q)
eta0<-matrix(as.numeric(A_TQ0==rQ_M),N,J)
L<-2^K
eps<-1e-04#Convergence criterion
diff<-1
iter<-1
gP<-g0
sP<-s0
Pro_Attri<-rep(1/2^K,L)##Equally probability for each pattern l
while(diff>eps){
eta_LJ<-matrix(NA,L,J)
PossA_TQ<-Poss_Attr%*%t(Q)
rQ<-rowSums(Q)
PossrQ_M<-rep(1,L)%*%t(rQ)
eta_LJ<-matrix(as.numeric(PossA_TQ==PossrQ_M),L,J)#eta
#Correct response probability with L patterns to J items
P_Correct<-((rep(1,L)%*%t(1-s))^(eta_LJ))*(rep(1,L)%*%t(g))^(1-eta_LJ)
P_Incorrect<-1-P_Correct
P_CorArr<-array(P_Correct,dim=c(L,J,N))#repeat N P_Correct
Res_Arr<-array(Res,dim=c(N,J,L))
Res_AT<-aperm(Res_Arr,c(3,2,1))#adjust the sort
#eRes<-(P_CorArr^Res_AT)*((1-P_CorArr)^(1-Res_AT))
eRes<-(P_CorArr*Res_AT)+((1-P_CorArr)*(1-Res_AT))#P(x_ij|alpha_l) for all i,j,l
Pa<-apply(eRes,c(1,3),prod)*(Pro_Attri%*%t(rep(1,N)))
PaS<-colSums(Pa)
PaRes<-Pa/(rep(1,L)%*%t(PaS))
I_l<-rowSums(PaRes)
I_jl0<-colSums((1-eta_LJ)*(as.vector(I_l)%*%t(rep(1,J))))
I_jl1<-sum(I_l)-I_jl0
Res_AT1<-aperm(Res_Arr,c(3,1,2))
PaRes_Arr<-array(PaRes,dim=c(L,N,J))
R_jl<-t(apply(Res_AT1*PaRes_Arr,c(1,3),sum))
R_jl0<-rowSums(R_jl*t(1-eta_LJ))
R_jl1<-rowSums(R_jl*t(eta_LJ))
g<-R_jl0/I_jl0
s<-(I_jl1-R_jl1)/I_jl1
diff<-max(abs(gP-g),abs(sP-s))###Consider PaRes or not?
gP<-g
sP<-s
iter<-iter+1
}
Est_Attribute_Pattern<-apply(PaRes,2,which.max)
Est_Attribute<-Poss_Attr[Est_Attribute_Pattern,]
View(cbind(Est_Attribute,Attr_N))
Est_Attribute-Attr_N
#Setting 2
N<-500; J<-20; K<-5;
L<-2^K
Poss_Attr<-matrix(NA,2^K,K)#All possible attribute pattern
for(l in 1:K){
repTimes<-2^(l-1)
Poss_Attr[,l]<-rep(c(rep(1,L/2^l),rep(0,L/2^l)),repTimes)
}
indexT<-sample(1:(2^K),N,replace=T)#Sample the true attribute for N subjects
Attr_N<-Poss_Attr[indexT,]
Q<-matrix(NA,J,K)  #Q matrix
Q[1:K,1:K]<-diag(K) #Identifiablity: three identity matrices
Q[(K+1):(2*K),1:K]<-diag(K)
Q[(2*K+1):(3*K),1:K]<-diag(K)
indexQ<-sample(1:(2^K-1),J-3*K,replace=T) #Avoid all zero design for each item j
Q[-(1:(3*K)),1:K]<-Poss_Attr[indexQ,]
#s<-rep(0.2,J)
#g<-rep(0.2,J)
sT<-runif(J,0,0.3) #True value for s
gT<-runif(J,0,0.3) #True value for g
A_TQ<-Attr_N%*%t(Q)
rQ<-rowSums(Q)
rQ_M<-rep(1,N)%*%t(rQ)
eta<-matrix(as.numeric(A_TQ==rQ_M),N,J)#True value for eta
Rs<-matrix(runif(N*J,0,1),N,J)
s1<-rep(1,N)%*%t(sT)
g1<-rep(1,N)%*%t(gT)
Com<-eta*(1-s1)+(1-eta)*g1#Correct response probability matrix
Res<-matrix(as.numeric(Rs<=Com),N,J)#Response Data
###########################Initial Values
s0<-runif(J,0,0.3)
g0<-runif(J,0,0.3)
s<-s0
g<-g0
Attr_N0<-matrix(NA,N,K)
Attr_N0[(1:N),(1:K)]<-sample(0:1,N*K,replace=T)#Random initial values for attributes
A_TQ0<-Attr_N0%*%t(Q)
eta0<-matrix(as.numeric(A_TQ0==rQ_M),N,J)
L<-2^K
eps<-1e-04#Convergence criterion
diff<-1
iter<-1
gP<-g0
sP<-s0
Pro_Attri<-rep(1/2^K,L)##Equally probability for each pattern l
while(diff>eps){
eta_LJ<-matrix(NA,L,J)
PossA_TQ<-Poss_Attr%*%t(Q)
rQ<-rowSums(Q)
PossrQ_M<-rep(1,L)%*%t(rQ)
eta_LJ<-matrix(as.numeric(PossA_TQ==PossrQ_M),L,J)#eta
#Correct response probability with L patterns to J items
P_Correct<-((rep(1,L)%*%t(1-s))^(eta_LJ))*(rep(1,L)%*%t(g))^(1-eta_LJ)
P_Incorrect<-1-P_Correct
P_CorArr<-array(P_Correct,dim=c(L,J,N))#repeat N P_Correct
Res_Arr<-array(Res,dim=c(N,J,L))
Res_AT<-aperm(Res_Arr,c(3,2,1))#adjust the sort
#eRes<-(P_CorArr^Res_AT)*((1-P_CorArr)^(1-Res_AT))
eRes<-(P_CorArr*Res_AT)+((1-P_CorArr)*(1-Res_AT))#P(x_ij|alpha_l) for all i,j,l
Pa<-apply(eRes,c(1,3),prod)*(Pro_Attri%*%t(rep(1,N)))
PaS<-colSums(Pa)
PaRes<-Pa/(rep(1,L)%*%t(PaS))
I_l<-rowSums(PaRes)
I_jl0<-colSums((1-eta_LJ)*(as.vector(I_l)%*%t(rep(1,J))))
I_jl1<-sum(I_l)-I_jl0
Res_AT1<-aperm(Res_Arr,c(3,1,2))
PaRes_Arr<-array(PaRes,dim=c(L,N,J))
R_jl<-t(apply(Res_AT1*PaRes_Arr,c(1,3),sum))
R_jl0<-rowSums(R_jl*t(1-eta_LJ))
R_jl1<-rowSums(R_jl*t(eta_LJ))
g<-R_jl0/I_jl0
s<-(I_jl1-R_jl1)/I_jl1
diff<-max(abs(gP-g),abs(sP-s))###Consider PaRes or not?
gP<-g
sP<-s
iter<-iter+1
}
Est_Attribute_Pattern<-apply(PaRes,2,which.max)
Est_Attribute<-Poss_Attr[Est_Attribute_Pattern,]
View(cbind(Est_Attribute,Attr_N))
iter
max(abs(g-gT))
max(abs(s-sT))
Q
install.packages("devtools")
install.packages("roxygen2")
setwd("C:/Users/Liujia/Desktop/SCC_R_package")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
rlang::last_trace()
F_to_C(79);
load_all(".")
load_all(".")
load_all(".")
rlang::last_trace()
setwd("C:/Users/Liujia/Desktop/SCC_R_package")
devtools::load_all(".")
setwd("C:/Users/Liujia/Desktop/SCC_R_package")
devtools::load_all(".")
getwd()
setwd("C:/Users/Liujia/Desktop/SCC_R_package")
devtools::load_all(".")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
warnings()
F_to_C(79);
C_to_F(20);
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
roxygenise();
?F_to_C;
